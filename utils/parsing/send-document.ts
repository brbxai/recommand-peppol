import { z } from "zod";
import "zod-openapi/extend";
import { sendInvoiceSchema } from "./invoice/schemas";
import { sendCreditNoteSchema } from "./creditnote/schemas";
import { sendSelfBillingInvoiceSchema } from "./self-billing-invoice/schemas";
import { sendSelfBillingCreditNoteSchema } from "./self-billing-creditnote/schemas";

export const DocumentType = {
  INVOICE: "invoice",
  CREDIT_NOTE: "creditNote",
  SELF_BILLING_INVOICE: "selfBillingInvoice",
  SELF_BILLING_CREDIT_NOTE: "selfBillingCreditNote",
  XML: "xml",
} as const;

export const documentTypeSchema = z.enum([DocumentType.INVOICE, DocumentType.CREDIT_NOTE, DocumentType.SELF_BILLING_INVOICE, DocumentType.SELF_BILLING_CREDIT_NOTE, DocumentType.XML])
.openapi({
  description: "The type of document.",
  example: DocumentType.INVOICE,
});

export type DocumentType =
  (typeof DocumentType)[keyof typeof DocumentType];

export const sendDocumentSchema = z.object({
  recipient: z.string().openapi({
    description:
      "The Peppol address of the recipient of the document. If no identifier is provided, 0208 (Belgian Enterprise Number) is assumed.",
    example: "0208:987654321",
  }),
  email: z.object({
    when: z.enum(["always", "on_peppol_failure"]).default("on_peppol_failure").openapi({
      description: "When to send the email.",
    }),
    to: z.array(z.string()).openapi({
      description: "The email addresses to send the document to.",
      example: ["support@recommand.eu"],
    }),
    subject: z.string().optional().openapi({
      description: "The subject of the email. If not provided, the subject will be autogenerated based on the document type.",
      example: "Invoice SI-001",
    }),
    htmlBody: z.string().optional().openapi({
      description: "The HTML body of the email. If not provided, the body will be autogenerated based on the document type.",
      example: "Dear customer, you can find your invoice attached.",
    }),
  }).optional().openapi({
    ref: "Email",
    description: "Send your document over email as well. You can choose to always send the email, or only when we cannot reach the recipient via Peppol. Each sent email is counted towards your document quota. When an email is expected to be sent, the request will succeed as long as an email has been sent, even if the Peppol sending failed (e.g. due to a non-existing Peppol address)."
  }),
  // pdfGeneration: z.object({
  //   enabled: z.boolean().default(false).openapi({
  //     description: "Whether to generate a PDF of the document.",
  //   }),
  //   templateHtml: z.string().optional().openapi({
  //     description: "The HTML template to use for the PDF. If not provided, the template will be autogenerated based on the document type.",
  //   }),
  // }).optional().openapi({
  //   ref: "PDFGeneration",
  //   description: "Generate a PDF of the document. Each generated PDF is counted towards your document quota. PDF generation is only available for invoices and credit notes.",
  // }),
  documentType: documentTypeSchema,
  document: z.union([sendInvoiceSchema, sendCreditNoteSchema, sendSelfBillingInvoiceSchema, sendSelfBillingCreditNoteSchema, z.string().openapi({ ref: "XML", title: "XML", description: "XML document as a string" })]),
  doctypeId: z.string().optional().openapi({
    description:
      "The document type identifier. Not required, only used when documentType is \"xml\".",
    example:
      "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1",
  }),
});

export type SendDocument = z.infer<typeof sendDocumentSchema>;
